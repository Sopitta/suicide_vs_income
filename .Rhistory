plot(alpha_list1, beta_list1, "p",
main = "Draws of alpha and beta",
xlab="Alpha",
ylab = "Beta",
xlim=c(-2,5),
ylim= c(0,35))
plot(alpha_list1, beta_list1, "p",
main = "Draws of alpha and beta",
xlab="Alpha",
ylab = "Beta",
xlim=c(-2,5),
ylim= c(0,35))
print(length(alpha_list1))
print(R)
print(R)
while(max(R)>1.05)
{
for (it in 1:num_it){
coeff =  metropolis_next(alpha1, beta1, bioassay$x, bioassay$y, bioassay$n)
alpha_list1[it] = coeff[1]; beta_list1[it] = coeff[2];
alpha1 = coeff[1]; beta1 = coeff[2]
coeff =  metropolis_next(alpha2, beta2, bioassay$x, bioassay$y, bioassay$n)
alpha_list2[it] = coeff[1]; beta_list2[it] = coeff[2];
alpha2 = coeff[1]; beta2 = coeff[2]
coeff =  metropolis_next(alpha3, beta3, bioassay$x, bioassay$y, bioassay$n)
alpha_list3[it] = coeff[1]; beta_list3[it] = coeff[2];
alpha3 = coeff[1]; beta3 = coeff[2]
}
it = 1:(num_it-warm_up);
alpha_list1 = alpha_list1[it];  alpha_list2 = alpha_list2[it];  alpha_list3 = alpha_list3[it];
beta_list1 = beta_list1[it];  beta_list2 = beta_list2[it];  beta_list3 = beta_list3[it];
alpha_list = matrix(c(alpha_list1, alpha_list2, alpha_list3), nrow=num_it-warm_up)
beta_list = matrix(c(beta_list1, beta_list2, beta_list3), nrow=num_it-warm_up)
R = c(Rhat(alpha_list), Rhat(beta_list))
print(R)
warm_up = warm_up*2;
num_it = warm_up; num_it = num_it+warm_up;
}
library(aaltobda)
library(rstan)
mu = c(0,10)
sigma = matrix(c(4, 10, 10, 100),nrow=2);
density_ratio = function(alpha_propose, alpha_previous, beta_propose, beta_previous, x, y, n){
p_proposed = bioassaylp(alpha_propose, beta_propose, x, y, n)+ dmvnorm(c(alpha_propose, beta_propose), mu, sigma, log=TRUE);
p_previous = bioassaylp(alpha_previous, beta_previous, x, y, n)+ dmvnorm(c(alpha_previous, beta_previous), mu, sigma, log=TRUE);
r = exp(p_proposed-p_previous)
return(r)
}
metropolis_next = function(alpha_previous, beta_previous, x, y, n){
alpha_propose = rnorm(1, alpha_previous, 2);
beta_propose = rnorm(1, beta_previous, 10);
r = density_ratio(alpha_propose, alpha_previous, beta_propose, beta_previous, bioassay$x, bioassay$y, bioassay$n)
r = min(1, r)
if(runif(1)>r){
alpha_propose = alpha_previous; beta_propose = beta_previous;
}
return(c(alpha_propose, beta_propose))
}
coeff = rmvnorm(1, mu, sigma);
alpha1 = mu[1]; beta1 = mu[2];
alpha2 = mu[1]; beta2 = mu[2];
alpha3 = mu[1]; beta3 = mu[2];
warm_up = 50;
num_it = 50; num_it = num_it+warm_up;
alpha_list1 = 1:num_it; beta_list1 = alpha_list1;
alpha_list2 = 1:num_it; beta_list2 = alpha_list2;
alpha_list3 = 1:num_it; beta_list3 = alpha_list3;
R = 5;
while(max(R)>1.05)
{
for (it in 1:num_it){
coeff =  metropolis_next(alpha1, beta1, bioassay$x, bioassay$y, bioassay$n)
alpha_list1[it] = coeff[1]; beta_list1[it] = coeff[2];
alpha1 = coeff[1]; beta1 = coeff[2]
coeff =  metropolis_next(alpha2, beta2, bioassay$x, bioassay$y, bioassay$n)
alpha_list2[it] = coeff[1]; beta_list2[it] = coeff[2];
alpha2 = coeff[1]; beta2 = coeff[2]
coeff =  metropolis_next(alpha3, beta3, bioassay$x, bioassay$y, bioassay$n)
alpha_list3[it] = coeff[1]; beta_list3[it] = coeff[2];
alpha3 = coeff[1]; beta3 = coeff[2]
}
it = 1:(num_it-warm_up);
alpha_list1 = alpha_list1[it];  alpha_list2 = alpha_list2[it];  alpha_list3 = alpha_list3[it];
beta_list1 = beta_list1[it];  beta_list2 = beta_list2[it];  beta_list3 = beta_list3[it];
alpha_list = matrix(c(alpha_list1, alpha_list2, alpha_list3), nrow=num_it-warm_up)
beta_list = matrix(c(beta_list1, beta_list2, beta_list3), nrow=num_it-warm_up)
R = c(Rhat(alpha_list), Rhat(beta_list))
print(R)
warm_up = warm_up*2;
num_it = warm_up; num_it = num_it+warm_up;
}
print(length(alpha_list1))
round(1.039557,2)
round(1.039557,1)
round(1.039557,1)
round(1.039557,2)
library(aaltobda)
library(rstan)
?multi_normal
?rstan::multi_normal
int operator/(int x, int y)
int operator/(5, 2)
operator/(5, 2)
data_bern <- list(N = 10, y = c(1, 1, 1, 0, 1, 1, 1, 0, 1, 0))
code_bern <- root("demos_rstan", "bern.stan")
code_bern <- bern.stan"
code_bern <- "bern.stan"
writeLines(readLines(code_bern))
code_bern <- "bern.stan"
writeLines(readLines(code_bern))
library(rprojroot)
library(shinystan)
root<-has_file(".BDA_R_demos_root")$make_fix_file()
writeLines(readLines(code_bern))
code_bern
code_bern <- "/home/meghna/Documents/work/bda/assignment6/bern.stan"
writeLines(readLines(code_bern))
rstan:::rstudio_stanc("Documents/bern.stan")
rstan:::rstudio_stanc("Documents/bern.stan")
rstan:::rstudio_stanc("Documents/work/bda/assignment6/bern.stan")
rstan:::rstudio_stanc("Documents/bern.stan")
rstan:::rstudio_stanc("Documents/bern.stan")
data_bern <- list(N = 10, y = c(1, 1, 1, 0, 1, 1, 1, 0, 1, 0))
fit_bern <- stan(file = code_bern, data = data_bern, seed = SEED)
SEED <- 48927 # set random seed for reproducability
fit_bern <- stan(file = code_bern, data = data_bern, seed = SEED)
monitor(fit_bern)
draws <- as.data.frame(fit_bern)
mcmc_hist(draws, pars='theta')
library(aaltobda)
library(rstan)
library(shinystan)
library(tidyr)
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
draws <- as.data.frame(fit_bern)
mcmc_hist(draws, pars='theta')
rstan:::rstudio_stanc("Documents/work/bda/assignment6/binomb.stan")
code_bern <- "/home/meghna/Documents/work/bda/assignment6/binomb.stan"
writeLines(readLines(code_bern))
code_bern <- "/home/meghna/Documents/work/bda/assignment6/binomb.stan"
writeLines(readLines(code_bern))
data_bin <- list(N = 100, y = 70)
fit_bin <- stan(file = code_binomb, data = data_bin, seed = SEED)
code_binomb <- "/home/meghna/Documents/work/bda/assignment6/binomb.stan"
writeLines(readLines(code_binomb))
data_bin <- list(N = 100, y = 70)
fit_bin <- stan(file = code_binomb, data = data_bin, seed = SEED)
draws <- as.data.frame(fit_bin)
mcmc_hist(draws, pars = 'theta')
library(aaltobda)
data("bioassay")
bioassay
code_ba <- "/home/meghna/Documents/work/bda/assignment6/biossa.stan"
writeLines(readLines(code_ba))
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
bioassay
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
bioassay$y
library(tidyr)
library(tidyr)
bioassay
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
data_ba
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
library(aaltobda)
library(rstan)
library(shinystan)
library(tidyr)
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
data("bioassay")
mu = c(0,10)
sigma = matrix(c(4, 10, 10, 100),nrow=2);
SEED <- 48927 # set random seed for reproducability
code_bern <- "/home/meghna/Documents/work/bda/assignment6/binomb.stan"
writeLines(readLines(code_bern))
data_bern <- list(N = 10, y = c(1, 1, 1, 0, 1, 1, 1, 0, 1, 0))
fit_bern <- stan(file = code_bern, data = data_bern, seed = SEED)
draws <- as.data.frame(fit_bern)
mcmc_hist(draws, pars='theta')
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
bioassay$nx
bioassay$n
N
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
draws <- as.data.frame(fit_bern)
mcmc_hist(draws, pars='theta')
View(draws)
View(draws)
View(draws)
View(draws)
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = 4, y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
draws <- as.data.frame(fit_ba)
mcmc_hist(draws, pars='theta')
draws
mcmc_hist(draws, pars = "theta[1]")
mcmc_hist(draws, pars = "theta[2]")
monitor(fit_ba)
?monitor
mcmc_hist(draws, pars = c("theta[1]", "theta[2]"))
View(draws)
View(draws)
?scatter.smooth
plot(alpha_list1, beta_list1, "p",
main = "Draws of alpha and beta",
xlab="Alpha",
ylab = "Beta",
xlim=c(-2,5),
ylim= c(0,35))
library(aaltobda)
library(rstan)
mu = c(0,10)
sigma = matrix(c(4, 10, 10, 100),nrow=2);
density_ratio = function(alpha_propose, alpha_previous, beta_propose, beta_previous, x, y, n){
p_proposed = bioassaylp(alpha_propose, beta_propose, x, y, n)+ dmvnorm(c(alpha_propose, beta_propose), mu, sigma, log=TRUE);
p_previous = bioassaylp(alpha_previous, beta_previous, x, y, n)+ dmvnorm(c(alpha_previous, beta_previous), mu, sigma, log=TRUE);
r = exp(p_proposed-p_previous)
return(r)
}
metropolis_next = function(alpha_previous, beta_previous, x, y, n){
alpha_propose = rnorm(1, alpha_previous, 2);
beta_propose = rnorm(1, beta_previous, 10);
r = density_ratio(alpha_propose, alpha_previous, beta_propose, beta_previous, bioassay$x, bioassay$y, bioassay$n)
r = min(1, r)
if(runif(1)>r){
alpha_propose = alpha_previous; beta_propose = beta_previous;
}
return(c(alpha_propose, beta_propose))
}
coeff = rmvnorm(1, mu, sigma);
alpha1 = mu[1]; beta1 = mu[2];
alpha2 = mu[1]; beta2 = mu[2];
alpha3 = mu[1]; beta3 = mu[2];
warm_up = 50;
num_it = 50; num_it = num_it+warm_up;
alpha_list1 = 1:num_it; beta_list1 = alpha_list1;
alpha_list2 = 1:num_it; beta_list2 = alpha_list2;
alpha_list3 = 1:num_it; beta_list3 = alpha_list3;
R = 5;
while(max(R)>1.05)
{
for (it in 1:num_it){
coeff =  metropolis_next(alpha1, beta1, bioassay$x, bioassay$y, bioassay$n)
alpha_list1[it] = coeff[1]; beta_list1[it] = coeff[2];
alpha1 = coeff[1]; beta1 = coeff[2]
coeff =  metropolis_next(alpha2, beta2, bioassay$x, bioassay$y, bioassay$n)
alpha_list2[it] = coeff[1]; beta_list2[it] = coeff[2];
alpha2 = coeff[1]; beta2 = coeff[2]
coeff =  metropolis_next(alpha3, beta3, bioassay$x, bioassay$y, bioassay$n)
alpha_list3[it] = coeff[1]; beta_list3[it] = coeff[2];
alpha3 = coeff[1]; beta3 = coeff[2]
}
it = 1:(num_it-warm_up);
alpha_list1 = alpha_list1[it];  alpha_list2 = alpha_list2[it];  alpha_list3 = alpha_list3[it];
beta_list1 = beta_list1[it];  beta_list2 = beta_list2[it];  beta_list3 = beta_list3[it];
alpha_list = matrix(c(alpha_list1, alpha_list2, alpha_list3), nrow=num_it-warm_up)
beta_list = matrix(c(beta_list1, beta_list2, beta_list3), nrow=num_it-warm_up)
R = c(Rhat(alpha_list), Rhat(beta_list))
print(R)
warm_up = warm_up*2;
num_it = warm_up; num_it = num_it+warm_up;
}
print(length(alpha_list1))
plot(it, alpha_list1,
main="Chains of alpha values",
ylab="alpha",
xlab="iteration",
type="l",
col="blue")
lines(it,alpha_list2, col="red")
lines(it,alpha_list3, col="black")
legend("topleft",
c("Chain 1","Chain 2", "Chain 3"),
fill=c("blue","red", "black")
)
plot(it, beta_list1,
main="Chains of beta values",
ylab="Beta",
xlab="Iteration",
type="l",
col="blue")
lines(it,beta_list2, col="red")
lines(it,beta_list3, col="black")
legend("topleft",
c("Chain 1","Chain 2", "Chain 3"),
fill=c("blue","red", "black")
)
print(R)
plot(alpha_list1, beta_list1, "p",
main = "Draws of alpha and beta",
xlab="Alpha",
ylab = "Beta",
xlim=c(-2,5),
ylim= c(0,35))
draws$`theta[1]`
plot(draws$`theta[1]`, draws$`theta[2]`, "p",
main = "Draws of alpha and beta",
xlab="Alpha",
ylab = "Beta",
xlim=c(-2,5),
ylim= c(0,35))
code_ba <- "Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
length(bioassay$y)
library(aaltobda)
library(rstan)
library(shinystan)
data("bioassay")
SEED <- 48927 # set random seed for reproducability
code_ba <- "Documents/work/bda/assignment6/bioassa.stan"
writeLines(readLines(code_ba))
code_ba <- "Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
data_ba <- list(N = length(bioassay$y), y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED)
draws <- as.data.frame(fit_ba)
monitor(fit_ba)
monitor(fit_ba)
plot(draws$`theta[1]`, draws$`theta[2]`, "p",
main = "Draws of alpha and beta",
xlab="Alpha",
ylab = "Beta",
xlim=c(-2,5),
ylim= c(0,35))
View(draws)
?Rhat
alpha = matrix(draws$`theta[1]`, nrow = 1000, ncol = 4)
beta = matrix(draws$`theta[2]`, nrow = 1000, ncol = 4)
alpha = matrix(draws$`theta[1]`, nrow = 1000, ncol = 4)
beta = matrix(draws$`theta[2]`, nrow = 1000, ncol = 4)
Rhat(alpha)
alpha = matrix(draws$`theta[1]`, nrow = 1000, ncol = 4)
beta = matrix(draws$`theta[2]`, nrow = 1000, ncol = 4)
print(c(Rhat(alpha), Rhat(beta)));
getwd()
code_ba <- "/Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
code_ba <- "Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
getwd()
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
?stan
data_ba <- list(N = length(bioassay$y), y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED, verbose = FALSE)
draws <- as.data.frame(fit_ba)
data_ba <- list(N = length(bioassay$y), y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED, verbose = TRUE)
draws <- as.data.frame(fit_ba)
data_ba <- list(N = length(bioassay$y), y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED, verbose = TRUE)
draws <- as.data.frame(fit_ba)
data_ba <- list(N = length(bioassay$y), y = bioassay$y, x = bioassay$x, n = bioassay$n)
fit_ba <- stan(file = code_ba, data = data_ba, seed = SEED, verbose = TRUE)
draws <- as.data.frame(fit_ba)
getwd()
getwd()
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
code_ba <- "/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
getwd()
code_ba <- "/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
getw
getwd()
code_ba <- "/home/meghna/Documents/work/bda/assignment6/bioassay.stan"
writeLines(readLines(code_ba))
setwd("C:/Users/SopittaT/Desktop/Fall2020/BDA/Project/Data")
rstan:::rstudio_stanc("Documents/work/bda/project/suicides_v_income_cov.stan")
rstan:::rstudio_stanc("Documents/work/bda/project/suicides_v_income_cov.stan")
rstan:::rstudio_stanc("Documents/work/bda/project/suicides_v_income_cov.stan")
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
ukdata =read.csv('UKdata.csv');
usdata =read.csv('USdata.csv');
countrydata =read.csv('countrydata.csv')
setwd("~/Documents/work/bda/project")
#file_name = "suicides_v_income.stan"
file_name = "suicides_v_income_1.stan"
sm_suicide <- rstan::stan_model(file = file_name)
ukdata =read.csv('UKdata.csv');
usdata =read.csv('USdata.csv');
countrydata =read.csv('countrydata.csv')
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
#file_name = "suicides_v_income.stan"
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
#file_name = "suicides_v_income.stan"
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
#file_name = "suicides_v_income.stan"
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
#file_name = "suicides_v_income.stan"
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
rstan:::rstudio_stanc("suicides_v_income_cov.stan")
#file_name = "suicides_v_income.stan"
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
#file_name = "suicides_v_income.stan"
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
model_hier
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95))
model_hier
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95), chains = 2, iter = 1000)
model_hier
file_name = "suicides_v_income_cov.stan"
sm_suicide <- rstan::stan_model(file = file_name)
stan_data <- list(y1 = ukdata$suicides100k, x1=ukdata$wagepercol, N1 = length(ukdata$wagepercol), y2 = usdata$suicides100k, x2=usdata$wagepercol, N2 = length(usdata$wagepercol), y3 = countrydata$suicides100k, x3=countrydata$wagepercol, N3 = length(countrydata$wagepercol))
model_hier <- rstan::sampling(sm_suicide, data = stan_data, seed = 2,control=list(adapt_delta=0.95), chains = 2, iter = 1000)
model_hier
draws_hier <- as.data.frame(model_hier)
View(draws_hier)
draws_hier$`sig_cov[1,1]`
log_lik  <- data.matrix(draws_hier[144:266])
loo1 <- loo(log_lik)
library(loo)
library(loo)
loo1 <- loo(log_lik)
loo1
View(loo1)
loo1$diagnostics$pareto_k
max(loo1$diagnostics$pareto_k)
